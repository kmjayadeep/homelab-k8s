apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  chart:
    spec:
      chart: kube-prometheus-stack
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: monitoring
      version: "76.4.0"
  interval: 1h0m0s
  install:
    crds: Create
  upgrade:
    crds: CreateReplace
  values:
    kubeApiServer:
      enabled: false
    kubelet:
      enabled: false
    kubeControllerManager:
      enabled: false
    kubeEtcd:
      enabled: false
    kubeScheduler:
      enabled: false
    kubeProxy:
      enabled: false
    grafana:
      enabled: true
      admin:
        existingSecret: grafana-creds
      ingress:
        enabled: true
        hosts:
        - grafana.cosmos.cboxlab.com
        tls:
        - secretName: cosmos-cboxlab-cert
          hosts:
          - "*.cosmos.cboxlab.com"
      alertmanager:
        enabled: false
      sidecar:
        datasources:
          url: http://thanos-query:9090/
    defaultRules:
      create: true
      rules:
        alertmanager: true
        etcd: false
        configReloaders: true
        general: true
        k8s: true
        kubeApiserverAvailability: true
        kubeApiserverBurnrate: true
        kubeApiserverHistogram: true
        kubeApiserverSlos: true
        kubeControllerManager: false
        kubelet: false
        kubeProxy: false
        kubePrometheusGeneral: true
        kubePrometheusNodeRecording: true
        kubernetesApps: true
        kubernetesResources: true
        kubernetesStorage: true
        kubernetesSystem: false
        kubeSchedulerAlerting: false
        kubeSchedulerRecording: false
        kubeStateMetrics: true
        network: true
        node: true
        nodeExporterAlerting: true
        nodeExporterRecording: true
        prometheus: true
        prometheusOperator: true

    additionalPrometheusRulesMap:
      flux:
        groups:
        - name: flux
          rules:
          - alert: ReconciliationFailure
            expr: max(gotk_reconcile_condition{status="False",type="Ready"}) by (exported_namespace, name, kind) + on(exported_namespace, name, kind) (max(gotk_reconcile_condition{status="Deleted"}) by (exported_namespace, name, kind)) * 2 == 1
            for: 10m
            labels:
              severity: warning
            annotations:
              summary: '{{ $labels.kind }} {{ $labels.exported_namespace }}/{{ $labels.name }} reconciliation has been failing for more than ten minutes.'
      
      postgresql:
        groups:
        - name: PostgreSQL
          rules:
          - alert: PostgreSQLMaxConnectionsReached
            expr: sum(pg_stat_activity_count) by (instance) >= sum(pg_settings_max_connections) by (instance) - sum(pg_settings_superuser_reserved_connections) by (instance)
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "{{ $labels.instance }} has maxed out Postgres connections."
              description: "{{ $labels.instance }} is exceeding the currently configured maximum Postgres connection limit (current value: {{ $value }}s). Services may be degraded - please take immediate action (you probably need to increase max_connections in the Docker image and re-deploy."

          - alert: PostgreSQLHighConnections
            expr: sum(pg_stat_activity_count) by (instance) > (sum(pg_settings_max_connections) by (instance) - sum(pg_settings_superuser_reserved_connections) by (instance)) * 0.8
            for: 10m
            labels:
              severity: critical
            annotations:
              summary: "{{ $labels.instance }} is over 80% of max Postgres connections."
              description: "{{ $labels.instance }} is exceeding 80% of the currently configured maximum Postgres connection limit (current value: {{ $value }}s). Please check utilization graphs and confirm if this is normal service growth, abuse or an otherwise temporary condition or if new resources need to be provisioned (or the limits increased, which is mostly likely)."

          - alert: PostgreSQLDown
            expr: pg_up != 1
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "PostgreSQL is not processing queries: {{ $labels.instance }}"
              description: "{{ $labels.instance }} is rejecting query requests from the exporter, and thus probably not allowing DNS requests to work either. User services should not be effected provided at least 1 node is still alive."

          - alert: PostgreSQLSlowQueries
            expr: avg(rate(pg_stat_activity_max_tx_duration{datname!~"template.*"}[2m])) by (datname) > 2 * 60
            for: 2m
            labels:
              severity: critical
            annotations:
              summary: "PostgreSQL high number of slow on {{ $labels.cluster }} for database {{ $labels.datname }} "
              description: "PostgreSQL high number of slow queries {{ $labels.cluster }} for database {{ $labels.datname }} with a value of {{ $value }} "

          - alert: PostgreSQLQPS
            expr: avg(irate(pg_stat_database_xact_commit{datname!~"template.*"}[5m]) + irate(pg_stat_database_xact_rollback{datname!~"template.*"}[5m])) by (datname) > 10000
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: "PostgreSQL high number of queries per second {{ $labels.cluster }} for database {{ $labels.datname }}"
              description: "PostgreSQL high number of queries per second on {{ $labels.cluster }} for database {{ $labels.datname }} with a value of {{ $value }}"

          - alert: PostgreSQLCacheHitRatio
            expr: avg(rate(pg_stat_database_blks_hit{datname!~"template.*"}[5m]) / (rate(pg_stat_database_blks_hit{datname!~"template.*"}[5m]) + rate(pg_stat_database_blks_read{datname!~"template.*"}[5m]))) by (datname) < 0.9
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: "PostgreSQL low cache hit rate on {{ $labels.cluster }} for database {{ $labels.datname }}"
              description: "PostgreSQL low on cache hit rate on {{ $labels.cluster }} for database {{ $labels.datname }} with a value of {{ $value }}"

    prometheus:
      enabled: true
      thanosService:
        enabled: true
      ingress:
        enabled: true
        hosts:
        - prometheus.cosmos.cboxlab.com
        tls:
        - secretName: cosmos-cboxlab-cert
          hosts:
          - "*.cosmos.cboxlab.com"
      prometheusSpec:
        # Allow monitoring from all namespaces
        ruleSelectorNilUsesHelmValues: false
        ruleSelector: {}
        serviceMonitorSelectorNilUsesHelmValues: false
        serviceMonitorSelector: {}
        retention: 3h
        resources:
          limits:
            memory: 700Mi
            cpu: 1
          requests:
            memory: 400Mi
            cpu: 1m
        storageSpec:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 5Gi
        thanos:
          objectStorageConfig:
            name: thanos-s3
            key: objstore.yml

        additionalScrapeConfigs:
        - job_name: jd-pc
          static_configs:
          - targets:
            - 100.108.88.96:9100 ## Node exporter from jd-pc
            - 100.108.88.96:18080 ## taskwarrior metrics from jd-pc
        # Postgres node
        - job_name: helios
          static_configs:
          - targets:
            - 192.168.1.77:9100 ## Node exporter
            - 192.168.1.77:9187 ## Postgres exporter

        # Docker hosts in truenas
        - job_name: truenas
          static_configs:
          - targets:
            - traefik.cosmos.cboxlab.com:8899 # traefik

      additionalPodMonitors:
      - name: flux-system
        namespaceSelector:
          matchNames:
            - flux-system
        selector:
          matchExpressions:
            - key: app
              operator: In
              values:
                - helm-controller
                - source-controller
                - kustomize-controller
                - notification-controller
                - image-automation-controller
                - image-reflector-controller
        podMetricsEndpoints:
          - port: http-prom
            relabelings:
              # https://github.com/prometheus-operator/prometheus-operator/issues/4816
              - sourceLabels: [__meta_kubernetes_pod_phase]
                action: keep
                regex: Running

      additionalServiceMonitors:
      - name: restic-exporter
        selector:
          matchLabels:
            app.kubernetes.io/name: restic-exporter
        namespaceSelector:
          matchNames:
          - monitoring
        endpoints:
        - port: http-metrics
          interval: 30s

    alertmanager:
      enabled: true
      ingress:
        enabled: true
        hosts:
        - alertmanager.cosmos.cboxlab.com
        tls:
        - secretName: cosmos-cboxlab-cert
          hosts:
          - "*.cosmos.cboxlab.com"
      alertmanagerSpec:
        useExistingSecret: true
        configSecret: alertmanager-config
        storageSpec:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 5Gi
    kube-state-metrics:
      rbac:
        extraRules:
        - apiGroups: ["monitoring.coreos.com"]
          resources: ["prometheuses"]
          verbs: ["list", "watch"]
      collectors:
      - certificatesigningrequests
      - configmaps
      - cronjobs
      - daemonsets
      - deployments
      - endpoints
      - horizontalpodautoscalers
      - ingresses
      - jobs
      - leases
      - limitranges
      - mutatingwebhookconfigurations
      - namespaces
      - networkpolicies
      - nodes
      - persistentvolumeclaims
      - persistentvolumes
      - poddisruptionbudgets
      - pods
      - replicasets
      - replicationcontrollers
      - resourcequotas
      - secrets
      - services
      - statefulsets
      - storageclasses
      - validatingwebhookconfigurations
      - volumeattachments
      - prometheuses
      extraArgs:
      - --custom-resource-state-config
      -  |
          spec:
            resources:
              - groupVersionKind:
                  group: monitoring.coreos.com
                  version: "v1"
                  kind: Prometheus
                metrics:
                  - name: unavailable_replicas
                    help: "Count of unavailable replicas"
                    each:
                      type: Gauge
                      gauge:
                        path: [status, unavailableReplicas]
